trigger:
- main

pool:
  name: Default

jobs:
- job: UnitTesting
  displayName: Unit Testing
  steps:
  # Step 1: Install Rust
  - script: |
      echo "Installing Rust..."
      curl https://sh.rustup.rs -sSf | sh -s -- -y
      export PATH="$HOME/.cargo/bin:$PATH"
      rustc --version
    displayName: 'Install Rust'

  # Step 2: Restore Dependencies
  - script: |
      echo "Restoring Rust dependencies..."
      export PATH="$HOME/.cargo/bin:$PATH"
      cargo fetch
    displayName: 'Restore Dependencies'

  # Step 3: Run Unit Tests
  - script: |
      echo "Running unit tests..."
      export PATH="$HOME/.cargo/bin:$PATH"
      cargo test --verbose
    displayName: 'Run Unit Tests'
    continueOnError: true

  # Step 4: Publish Test Results
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/target/test-results/**/*.xml'  # Adjust the path for Rust JUnit output
      mergeTestResults: true
      failTaskOnFailedTests: true
      testRunTitle: 'Rust Unit Tests'


- job: SonarQube
  displayName: SonarQube Analysis
  dependsOn: UnitTesting
  steps:
  - script: |
      echo "Installing Rust..."
      curl https://sh.rustup.rs -sSf | sh -s -- -y
      export PATH="$HOME/.cargo/bin:$PATH"
      rustc --version
    displayName: 'Install Rust'

  - task: SonarQubePrepare@7
    inputs:
      SonarQube: 'azuzu'
      scannerMode: 'cli'
      configMode: 'manual'
      cliProjectKey: $(project_key)
      cliSources: '.'

  - task: SonarQubeAnalyze@7
    inputs:
      jdkversion: 'JAVA_HOME'

  - task: SonarQubePublish@7
    inputs:
      pollingTimeoutSec: '300'


- job: Packing
  displayName: Packing
  dependsOn: UnitTesting
  steps:
  # Step 1: Install Rust
  - script: |
      echo "Installing Rust..."
      curl https://sh.rustup.rs -sSf | sh -s -- -y
      export PATH="$HOME/.cargo/bin:$PATH"
      rustc --version
    displayName: 'Install Rust'

  # Step 2: Restore Dependencies
  - script: |
      echo "Restoring Rust dependencies..."
      export PATH="$HOME/.cargo/bin:$PATH"
      cargo fetch
    displayName: 'Restore Dependencies'

  # Step 3: Build Project
  - script: |
      echo "Building the project..."
      export PATH="$HOME/.cargo/bin:$PATH"
      cargo build --release
    displayName: 'Build Project'

  # Step 4: Package Application
  - script: |
      echo "Packaging application..."
      tar -czvf rust_app.tar.gz target/release/
    displayName: 'Package Application'

  # Step 5: Docker Installation
  - task: DockerInstaller@0
    inputs:
      dockerVersion: '17.09.0-ce'

  # Step 6: Build Docker Image
  - task: Docker@2
    inputs:
      containerRegistry: 'dokuku'
      repository: 'anime-games-launcher'
      command: 'build'
      Dockerfile: '**/Dockerfile'
    displayName: 'Build Docker Image'

  # Step 7: Push Docker Image
  - task: Docker@2
    inputs:
      containerRegistry: 'dokuku'
      repository: 'anime-games-launcher'
      command: 'push'
    displayName: 'Push Docker Image'
